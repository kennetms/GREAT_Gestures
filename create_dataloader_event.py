# -*- coding: utf-8 -*-
"""nmist_event

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RPbSr7dkypZ-Sg7olItvRtoQlMyqyTQU
"""

cd /content/drive/MyDrive/Colab Notebooks/uci

!pip install dv

import torch
import h5py
from torch.utils.data import Dataset, DataLoader
from create_hdf5_event import create_hdf5, get_user_name
from torchvision.transforms import Compose, ToTensor, Normalize

class EventDataset(Dataset):
    def __init__(self, root, hdf_filename, label_filename, train=True, transform=None, target_transform=None):
        self.n = 0
        #self.nclasses = 0
        self.root = root
        self.train = train
        self.hdf_filename = hdf_filename
        self.label_filename = label_filename

        with h5py.File(self.root + self.hdf_filename, 'r', swmr=True, libver="latest") as file:
            try:
                if train:
                    self.n = file['extra'].attrs['Ntrain']
                    self.keys = file['extra']['train_keys'][()]
                else:
                    self.n = file['extra'].attrs['Ntest']
                    self.keys = file['extra']['test_keys'][()]
            except AttributeError:
                print('Attribute not found in hdf5 file.')
                raise

    #create_hdf5("gesture_event.hdf5", 'Gesture_Data_Labels - Sheet1.csv', r'C:\Users\yeieu\Downloads\All_Event_Data')
    def create_hdf5_events(self):
        create_hdf5(self.hdf_filename, self.label_filename, self.root)

    def __len__(self):
        return self.n
    
    def __getitem__(self, key):
          with h5py.File(self.root+self.hdf_filename, 'r', swmr=True, libver="latest") as f:
              if self.train:
                  key = f['extra']['train_keys'][key]
              else:
                  key = f['extra']['test_keys'][key]
              data, target = sample(f, key)

          if self.transform is not None:
              data = self.transform(data)
            
          if self.target_transform is not None:
              target = self.target_transform(target)
          return data, target
    
    def sample(hdf5_file, key):
          dset = hdf5_file['data'][f'user{get_user_name(key[0])}'][key[1]]

          time = dset['times'][()]
          addr = dset['addrs'][()]
          label = dset['labels']

          return time+addr, label

def create_datasets(
    root = 'gesture_event.hdf5',
    batch_size = 72,
    transform_train = None,
    transform_test = None,
    target_transform_train = None,
    target_transform_test = None):

    if transform_train is None:
        transform_train = Compose([
                                   torch.Tensor()
        ])
          
    if transform_test is None:
        transform_test = Compose([
                                  torch.Tensor()
        ])

    if target_transform_train is None:
        target_transform_train = Compose([
                                          torch.Tensor()
        ])
          
    if target_transform_test is None:
        target_transform_test = Compose([
                                         torch.Tensor()
        ])


    train_ds = EventDataset('/content/drive/MyDrive/Colab Notebooks/uci/', "gesture_event.hdf5", 'Gesture_Data_Labels - Sheet1.csv', train=True, transform=transform_train, target_transform=target_transform_train)

    test_ds = EventDataset('/content/drive/MyDrive/Colab Notebooks/uci/', "gesture_event.hdf5", 'Gesture_Data_Labels - Sheet1.csv', transform=transform_test, target_transform=target_transform_test)

    return train_ds, test_ds

def create_dataloader(
    root = 'gesture_event.hdf5',
    batch_size = 72,
    transform_train = None,
    transform_test = None,
    target_transform_train = None,
    target_transform_test = None):
  
    train_d, test_d = create_datasets(
        root = root,
        batch_size = batch_size,
        transform_train = transform_train,
        transform_test = transform_test,
        target_transform_train = target_transform_train,
        target_transform_test = target_transform_test)
    
    train_dl = torch.utils.data.DataLoader(train_d, shuffle=True, batch_size=batch_size)
    test_dl = torch.utils.data.DataLoader(test_d, shuffle=False, batch_size=batch_size)

    return train_dl, test_dl

if __name__ == "__main__":
  #/content/drive/MyDrive/Colab Notebooks/uci/gesture_event.hdf5
    dataset = EventDataset('/content/drive/MyDrive/Colab Notebooks/uci/', "gesture_event.hdf5", 'Gesture_Data_Labels - Sheet1.csv')
    print(len(dataset))